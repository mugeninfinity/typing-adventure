# docker-compose.yml
version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
    container_name: typing-adventure-frontend
    ports:
      - "3052:80"
    restart: always
    depends_on:
      backend:
        condition: service_started

  backend:
    build:
      context: ./backend
    container_name: typing-adventure-backend
    ports:
      - "3051:3000"
    restart: always
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=typing_user
      - POSTGRES_PASSWORD=supersecretpassword
      - POSTGRES_DB=typing_adventure_db
    depends_on:
      db:
        # NEW: Wait for the db to be healthy, not just started
        condition: service_healthy
    volumes:
      - uploads_data:/usr/src/app/uploads

  db:
    image: postgres:13-alpine
    container_name: typing-adventure-db
    restart: always
    environment:
      - POSTGRES_USER=typing_user
      - POSTGRES_PASSWORD=supersecretpassword
      - POSTGRES_DB=typing_adventure_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Add this volume to run the init script
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    # NEW: Add a healthcheck to ensure the database is ready
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U typing_user -d typing_adventure_db"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  uploads_data: